[{"/workspace/interactive-web/test-react-project/src/reportWebVitals.js":"1","/workspace/interactive-web/test-react-project/src/App.js":"2","/workspace/interactive-web/test-react-project/src/index.js":"3","/workspace/interactive-web/test-react-project/src/Babel.js":"4","/workspace/interactive-web/test-react-project/src/card/Card.js":"5","/workspace/interactive-web/test-react-project/src/circle/Circle.js":"6"},{"size":362,"mtime":1608726457000,"results":"7","hashOfConfig":"8"},{"size":3422,"mtime":1611755369220,"results":"9","hashOfConfig":"8"},{"size":500,"mtime":1609333190868,"results":"10","hashOfConfig":"8"},{"size":3517,"mtime":1609333148624,"results":"11","hashOfConfig":"8"},{"size":973,"mtime":1611752060197,"results":"12","hashOfConfig":"8"},{"size":1261,"mtime":1611753702778,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1f868bi",{"filePath":"16","messages":"17","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":1,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/workspace/interactive-web/test-react-project/src/reportWebVitals.js",[],"/workspace/interactive-web/test-react-project/src/App.js",["27","28"],"import './App.css';\nimport {useState} from 'react';\nimport Card from './card/Card';\nimport Circle from './circle/Circle';\n\n//////////////////\n\n// function App() {\n//   return (\n//       <svg className=\"App\">\n//           <Circle/>\n//       </svg>\n\n//   );\n// }\n\n// export default App;\n\nfunction App() {\n    // const [moveAngle, setMoveAngle] = useState(0);\n    // var isActive = false;\n    // var fromX, fromY;\n    // document.addEventListener(\"mousedown\", (ev) => {\n\t// \tisActive = true;\n\t// \tfromX = ev.offsetX;\n\t// \tfromY = ev.offsetY;\n\t// });\n\n\t// document.addEventListener(\"mouseup\", (ev) => {\n\t// \tisActive = false;\n\t// \t// setMoveAngle(90);\n\t// });\n\n\t// document.addEventListener(\"mousemove\", (ev) => {\n\t// \tif (isActive) {\n\t// \t\tvar toX = ev.offsetX;\n\t// \t\tvar toY = ev.offsetY;\n\t// \t\tvar move = (-1) * Math.atan2(toY - fromY, toX - fromX) * 180 / Math.PI;\n\t// \t\tconsole.log(\"move ======== \" + move);\n\t// \t\tsetMoveAngle(move);\n\t// \t}\n\t// });\n    const [position, setPosition] = useState({\n        x: 50,\n        y: 50,\n        active: false,\n        offset: { }\n    });\n    const handleMouseDown = e => {\n        const el = e.target;\n        const bbox = e.target.getBoundingClientRect();\n        const x = e.clientX - bbox.left;\n        const y = e.clientY - bbox.top;\n        el.setPointerCapture(e.pointerId);\n        setPosition({\n        ...position,\n        active: true,\n        offset: {\n            x,\n            y\n        }\n        });\n    };\n    const handleMouseMove = e => {\n        const bbox = e.target.getBoundingClientRect();\n        const x = e.clientX - bbox.left;\n        const y = e.clientY - bbox.top;\n        if (position.active) {\n        setPosition({\n            ...position,\n            x: position.x - (position.offset.x - x),\n            y: position.y - (position.offset.y - y)\n        });\n        }\n    };\n    const handleMouseUp = e => {\n        setPosition({\n        ...position,\n        active: false\n        });\n    };\n\n    const colors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"navy\", \"purple\", \"black\", \"green\"];\n    // const colors = [\"red\", \"orange\", \"yellow\", \"green\", \"blue\", \"navy\"];\n    var interval = 360/(colors.length);\n    var rotate = -interval;\n    const centerPos = 400;\n    var translateX = 0;\n    var translateY = 0;\n    \n    const cards = colors.map((value) => {\n        rotate += interval;\n        // translateX = Math.floor(200*Math.cos(toRadians(rotate+moveAngle))) + centerPos;\n        // translateY = Math.floor(200*Math.sin(toRadians(rotate+moveAngle))) + centerPos;\n        // return <Card translateX={translateX} translateY={translateY} rotate={rotate-90+moveAngle} color={value} />\n        translateX = Math.floor(200*Math.cos(toRadians(rotate))) + centerPos;\n        translateY = Math.floor(200*Math.sin(toRadians(rotate))) + centerPos;\n        return <Card translateX={translateX} translateY={translateY} rotate={rotate-90} color={value} />\n    });\n    console.log(position)\n    return (\n        <div className=\"App\"\n            onMouseDown={handleMouseDown}\n            onMouseMove={handleMouseMove}\n            onMouseUp={handleMouseUp}\n        >\n        {cards}\n        </div>\n    );\n}\nfunction toRadians(degrees) {\t\n\treturn degrees * (Math.PI / 180);\n}\nfunction toDegree(radians){\n    return radians * (180/Math.PI);\n}\n// function getAngle(x, y) {\n// \treturn radiansToDegrees(Math.atan2(circleY - y, x - circleX));\n// }\nexport default App;\n","/workspace/interactive-web/test-react-project/src/index.js",[],"/workspace/interactive-web/test-react-project/src/Babel.js",["29","30","31","32"],"/workspace/interactive-web/test-react-project/src/card/Card.js",[],"/workspace/interactive-web/test-react-project/src/circle/Circle.js",[],{"ruleId":"33","severity":1,"message":"34","line":4,"column":8,"nodeType":"35","messageId":"36","endLine":4,"endColumn":14},{"ruleId":"33","severity":1,"message":"37","line":114,"column":10,"nodeType":"35","messageId":"36","endLine":114,"endColumn":18},{"ruleId":"33","severity":1,"message":"38","line":1,"column":8,"nodeType":"35","messageId":"36","endLine":1,"endColumn":12},{"ruleId":"39","severity":1,"message":"40","line":37,"column":15,"nodeType":"41","endLine":37,"endColumn":27},{"ruleId":"42","severity":1,"message":"43","line":37,"column":27,"nodeType":"41","endLine":37,"endColumn":49},{"ruleId":"44","severity":2,"message":"45","line":111,"column":1,"nodeType":"35","messageId":"46","endLine":111,"endColumn":9},"no-unused-vars","'Circle' is defined but never used.","Identifier","unusedVar","'toDegree' is defined but never used.","'logo' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-undef","'ReactDOM' is not defined.","undef"]